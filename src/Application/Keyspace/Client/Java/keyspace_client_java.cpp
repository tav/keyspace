/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




#include <stdexcept>


#include <string>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <utility>


#include <inttypes.h>


#include <stdint.h>		// Use the C99 official header


/* Includes the header in the wrapper code */
#define SWIG_FILE_WITH_INIT
#include "../KeyspaceClientWrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_keyspace_1clientJNI_imaxdiv_1t_1quot_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imaxdiv_t **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->quot = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_keyspace_1clientJNI_imaxdiv_1t_1quot_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imaxdiv_t **)&jarg1; 
  result = (long long) ((arg1)->quot);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_keyspace_1clientJNI_imaxdiv_1t_1rem_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imaxdiv_t **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->rem = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_keyspace_1clientJNI_imaxdiv_1t_1rem_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imaxdiv_t **)&jarg1; 
  result = (long long) ((arg1)->rem);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_keyspace_1clientJNI_new_1imaxdiv_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imaxdiv_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imaxdiv_t *)new imaxdiv_t();
  *(imaxdiv_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_keyspace_1clientJNI_delete_1imaxdiv_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imaxdiv_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_keyspace_1clientJNI_imaxabs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  intmax_t arg1 ;
  intmax_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (intmax_t)jarg1; 
  result = (intmax_t)imaxabs(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_keyspace_1clientJNI_imaxdiv(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  intmax_t arg1 ;
  intmax_t arg2 ;
  imaxdiv_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (intmax_t)jarg1; 
  arg2 = (intmax_t)jarg2; 
  result = imaxdiv(arg1,arg2);
  *(imaxdiv_t **)&jresult = new imaxdiv_t((imaxdiv_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_keyspace_1clientJNI_strtoimax(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  intmax_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(char ***)&jarg2; 
  arg3 = (int)jarg3; 
  result = (intmax_t)strtoimax((char const *)arg1,arg2,arg3);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_keyspace_1clientJNI_strtoumax(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jobject jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  uintmax_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(char ***)&jarg2; 
  arg3 = (int)jarg3; 
  result = (uintmax_t)strtoumax((char const *)arg1,arg2,arg3);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_keyspace_1clientJNI_new_1NodeParams(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  NodeParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (NodeParams *)new NodeParams(arg1);
  *(NodeParams **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_keyspace_1clientJNI_delete_1NodeParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NodeParams *arg1 = (NodeParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NodeParams **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_keyspace_1clientJNI_NodeParams_1Close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  NodeParams *arg1 = (NodeParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NodeParams **)&jarg1; 
  (arg1)->Close();
}


SWIGEXPORT void JNICALL Java_keyspace_1clientJNI_NodeParams_1AddNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  NodeParams *arg1 = (NodeParams *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NodeParams **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->AddNode((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_keyspace_1clientJNI_NodeParams_1nodec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  NodeParams *arg1 = (NodeParams *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NodeParams **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nodec = arg2;
  
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_NodeParams_1nodec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  NodeParams *arg1 = (NodeParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NodeParams **)&jarg1; 
  result = (int) ((arg1)->nodec);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_keyspace_1clientJNI_NodeParams_1nodes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  NodeParams *arg1 = (NodeParams *) 0 ;
  char **arg2 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NodeParams **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  if (arg1) (arg1)->nodes = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_keyspace_1clientJNI_NodeParams_1nodes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NodeParams *arg1 = (NodeParams *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NodeParams **)&jarg1; 
  result = (char **) ((arg1)->nodes);
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_keyspace_1clientJNI_NodeParams_1num_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  NodeParams *arg1 = (NodeParams *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NodeParams **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num = arg2;
  
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_NodeParams_1num_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  NodeParams *arg1 = (NodeParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NodeParams **)&jarg1; 
  result = (int) ((arg1)->num);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_keyspace_1clientJNI_ResultBegin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ResultObj arg1 = (ResultObj) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ResultObj *)&jarg1; 
  ResultBegin(arg1);
}


SWIGEXPORT void JNICALL Java_keyspace_1clientJNI_ResultNext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ResultObj arg1 = (ResultObj) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ResultObj *)&jarg1; 
  ResultNext(arg1);
}


SWIGEXPORT jboolean JNICALL Java_keyspace_1clientJNI_ResultIsEnd(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  ResultObj arg1 = (ResultObj) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ResultObj *)&jarg1; 
  result = (bool)ResultIsEnd(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_keyspace_1clientJNI_ResultClose(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ResultObj arg1 = (ResultObj) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ResultObj *)&jarg1; 
  ResultClose(arg1);
}


SWIGEXPORT jstring JNICALL Java_keyspace_1clientJNI_ResultKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  ResultObj arg1 = (ResultObj) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ResultObj *)&jarg1; 
  result = ResultKey(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_keyspace_1clientJNI_ResultValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  ResultObj arg1 = (ResultObj) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ResultObj *)&jarg1; 
  result = ResultValue(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_ResultTransportStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ResultObj arg1 = (ResultObj) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ResultObj *)&jarg1; 
  result = (int)ResultTransportStatus(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_ResultConnectivityStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ResultObj arg1 = (ResultObj) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ResultObj *)&jarg1; 
  result = (int)ResultConnectivityStatus(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_ResultTimeoutStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ResultObj arg1 = (ResultObj) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ResultObj *)&jarg1; 
  result = (int)ResultTimeoutStatus(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_ResultCommandStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ResultObj arg1 = (ResultObj) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ResultObj *)&jarg1; 
  result = (int)ResultCommandStatus(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_keyspace_1clientJNI_Create(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ClientObj result;
  
  (void)jenv;
  (void)jcls;
  result = (ClientObj)Create();
  *(ClientObj *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  NodeParams *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(ClientObj *)&jarg1; 
  arg2 = *(NodeParams **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NodeParams const & reference is null");
    return 0;
  } 
  result = (int)Init(arg1,(NodeParams const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_keyspace_1clientJNI_Destroy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ClientObj arg1 = (ClientObj) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  Destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_keyspace_1clientJNI_GetResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  ResultObj result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  result = (ResultObj)GetResult(arg1);
  *(ResultObj *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_keyspace_1clientJNI_SetGlobalTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  SetGlobalTimeout(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_keyspace_1clientJNI_SetMasterTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  SetMasterTimeout(arg1,arg2);
}


SWIGEXPORT jobject JNICALL Java_keyspace_1clientJNI_GetGlobalTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jobject jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  result = (uint64_t)GetGlobalTimeout(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_keyspace_1clientJNI_GetMasterTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jobject jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  result = (uint64_t)GetMasterTimeout(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_GetMaster(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  result = (int)GetMaster(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_keyspace_1clientJNI_DistributeDirty(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  ClientObj arg1 = (ClientObj) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  arg2 = jarg2 ? true : false; 
  DistributeDirty(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_Get(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)Get(arg1,(std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_DirtyGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)DirtyGet(arg1,(std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_Count(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jobject jarg4, jboolean jarg5, jboolean jarg6) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint64_t arg4 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    for(i=0; i<sz; i++) {
      arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (int)Count(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_DirtyCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jobject jarg4, jboolean jarg5, jboolean jarg6) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint64_t arg4 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    for(i=0; i<sz; i++) {
      arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (int)DirtyCount(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_ListKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jobject jarg4, jboolean jarg5, jboolean jarg6) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint64_t arg4 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    for(i=0; i<sz; i++) {
      arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (int)ListKeys(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_DirtyListKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jobject jarg4, jboolean jarg5, jboolean jarg6) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint64_t arg4 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    for(i=0; i<sz; i++) {
      arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (int)DirtyListKeys(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_ListKeyValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jobject jarg4, jboolean jarg5, jboolean jarg6) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint64_t arg4 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    for(i=0; i<sz; i++) {
      arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (int)ListKeyValues(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_DirtyListKeyValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jobject jarg4, jboolean jarg5, jboolean jarg6) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint64_t arg4 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    for(i=0; i<sz; i++) {
      arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (int)DirtyListKeyValues(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_Set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)Set(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_TestAndSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jstring jarg4) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (int)TestAndSet(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_Add(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int64_t)jarg3; 
  result = (int)Add(arg1,(std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_Delete(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)Delete(arg1,(std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_Remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)Remove(arg1,(std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_Rename(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)Rename(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_Prune(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)Prune(arg1,(std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_Begin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  result = (int)Begin(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_Submit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  result = (int)Submit(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_keyspace_1clientJNI_Cancel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  result = (int)Cancel(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_keyspace_1clientJNI_IsBatched(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  ClientObj arg1 = (ClientObj) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientObj *)&jarg1; 
  result = (bool)IsBatched(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_keyspace_1clientJNI_SetTrace(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  SetTrace(arg1);
}


#ifdef __cplusplus
}
#endif

