# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.

package keyspace_client;
use base qw(Exporter);
use base qw(DynaLoader);
package keyspace_clientc;
bootstrap keyspace_client;
package keyspace_client;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package keyspace_client;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package keyspace_client;

*imaxabs = *keyspace_clientc::imaxabs;
*imaxdiv = *keyspace_clientc::imaxdiv;
*strtoimax = *keyspace_clientc::strtoimax;
*strtoumax = *keyspace_clientc::strtoumax;
*Keyspace_ResultBegin = *keyspace_clientc::Keyspace_ResultBegin;
*Keyspace_ResultNext = *keyspace_clientc::Keyspace_ResultNext;
*Keyspace_ResultIsEnd = *keyspace_clientc::Keyspace_ResultIsEnd;
*Keyspace_ResultClose = *keyspace_clientc::Keyspace_ResultClose;
*Keyspace_ResultKey = *keyspace_clientc::Keyspace_ResultKey;
*Keyspace_ResultValue = *keyspace_clientc::Keyspace_ResultValue;
*Keyspace_ResultTransportStatus = *keyspace_clientc::Keyspace_ResultTransportStatus;
*Keyspace_ResultConnectivityStatus = *keyspace_clientc::Keyspace_ResultConnectivityStatus;
*Keyspace_ResultTimeoutStatus = *keyspace_clientc::Keyspace_ResultTimeoutStatus;
*Keyspace_ResultCommandStatus = *keyspace_clientc::Keyspace_ResultCommandStatus;
*Keyspace_Create = *keyspace_clientc::Keyspace_Create;
*Keyspace_Init = *keyspace_clientc::Keyspace_Init;
*Keyspace_Destroy = *keyspace_clientc::Keyspace_Destroy;
*Keyspace_GetResult = *keyspace_clientc::Keyspace_GetResult;
*Keyspace_SetGlobalTimeout = *keyspace_clientc::Keyspace_SetGlobalTimeout;
*Keyspace_SetMasterTimeout = *keyspace_clientc::Keyspace_SetMasterTimeout;
*Keyspace_GetGlobalTimeout = *keyspace_clientc::Keyspace_GetGlobalTimeout;
*Keyspace_GetMasterTimeout = *keyspace_clientc::Keyspace_GetMasterTimeout;
*Keyspace_GetMaster = *keyspace_clientc::Keyspace_GetMaster;
*Keyspace_DistributeDirty = *keyspace_clientc::Keyspace_DistributeDirty;
*Keyspace_Get = *keyspace_clientc::Keyspace_Get;
*Keyspace_DirtyGet = *keyspace_clientc::Keyspace_DirtyGet;
*Keyspace_Count = *keyspace_clientc::Keyspace_Count;
*Keyspace_CountStr = *keyspace_clientc::Keyspace_CountStr;
*Keyspace_DirtyCount = *keyspace_clientc::Keyspace_DirtyCount;
*Keyspace_DirtyCountStr = *keyspace_clientc::Keyspace_DirtyCountStr;
*Keyspace_ListKeys = *keyspace_clientc::Keyspace_ListKeys;
*Keyspace_ListKeysStr = *keyspace_clientc::Keyspace_ListKeysStr;
*Keyspace_DirtyListKeys = *keyspace_clientc::Keyspace_DirtyListKeys;
*Keyspace_DirtyListKeysStr = *keyspace_clientc::Keyspace_DirtyListKeysStr;
*Keyspace_ListKeyValues = *keyspace_clientc::Keyspace_ListKeyValues;
*Keyspace_ListKeyValuesStr = *keyspace_clientc::Keyspace_ListKeyValuesStr;
*Keyspace_DirtyListKeyValues = *keyspace_clientc::Keyspace_DirtyListKeyValues;
*Keyspace_DirtyListKeyValuesStr = *keyspace_clientc::Keyspace_DirtyListKeyValuesStr;
*Keyspace_Set = *keyspace_clientc::Keyspace_Set;
*Keyspace_TestAndSet = *keyspace_clientc::Keyspace_TestAndSet;
*Keyspace_Add = *keyspace_clientc::Keyspace_Add;
*Keyspace_AddStr = *keyspace_clientc::Keyspace_AddStr;
*Keyspace_Delete = *keyspace_clientc::Keyspace_Delete;
*Keyspace_Remove = *keyspace_clientc::Keyspace_Remove;
*Keyspace_Rename = *keyspace_clientc::Keyspace_Rename;
*Keyspace_Prune = *keyspace_clientc::Keyspace_Prune;
*Keyspace_Begin = *keyspace_clientc::Keyspace_Begin;
*Keyspace_Submit = *keyspace_clientc::Keyspace_Submit;
*Keyspace_Cancel = *keyspace_clientc::Keyspace_Cancel;
*Keyspace_IsBatched = *keyspace_clientc::Keyspace_IsBatched;
*Keyspace_SetTrace = *keyspace_clientc::Keyspace_SetTrace;

############# Class : keyspace_client::imaxdiv_t ##############

package keyspace_client::imaxdiv_t;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( keyspace_client );
%OWNER = ();
%ITERATORS = ();
*swig_quot_get = *keyspace_clientc::imaxdiv_t_quot_get;
*swig_quot_set = *keyspace_clientc::imaxdiv_t_quot_set;
*swig_rem_get = *keyspace_clientc::imaxdiv_t_rem_get;
*swig_rem_set = *keyspace_clientc::imaxdiv_t_rem_set;
sub new {
    my $pkg = shift;
    my $self = keyspace_clientc::new_imaxdiv_t(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        keyspace_clientc::delete_imaxdiv_t($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : keyspace_client::Keyspace_NodeParams ##############

package keyspace_client::Keyspace_NodeParams;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( keyspace_client );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = keyspace_clientc::new_Keyspace_NodeParams(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        keyspace_clientc::delete_Keyspace_NodeParams($self);
        delete $OWNER{$self};
    }
}

*Close = *keyspace_clientc::Keyspace_NodeParams_Close;
*AddNode = *keyspace_clientc::Keyspace_NodeParams_AddNode;
*swig_nodec_get = *keyspace_clientc::Keyspace_NodeParams_nodec_get;
*swig_nodec_set = *keyspace_clientc::Keyspace_NodeParams_nodec_set;
*swig_nodes_get = *keyspace_clientc::Keyspace_NodeParams_nodes_get;
*swig_nodes_set = *keyspace_clientc::Keyspace_NodeParams_nodes_set;
*swig_num_get = *keyspace_clientc::Keyspace_NodeParams_num_get;
*swig_num_set = *keyspace_clientc::Keyspace_NodeParams_num_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package keyspace_client;

1;
